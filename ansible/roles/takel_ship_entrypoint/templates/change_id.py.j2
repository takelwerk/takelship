#!/usr/bin/env python3

import argparse
import logging
import os
import subprocess
from datetime import datetime
from pathlib import Path

default_uid = '1000'
default_gid = '1000'


class ChangeID(object):

    def __init__(self):
        args = self._parse_args_()
        self._debug = False
        if (os.environ.get("TAKELSHIP_DEBUG", "").lower() == "true"
                or args.debug):
            self._debug = True
        now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        self._logger = self._logger_init_(self._debug)
        self._logger.debug('takelship entrypoint '
                           'log starting: {now}'.format(now=now))
        self._username = '{{ takel_ship_compose_user.owner }}'
        self._groupname = '{{ takel_ship_compose_user.group }}'
        self._newgroup = 'podgrp'
        self._uid = os.environ.get("TAKELSHIP_UID",
                                   args.uid)
        self._gid = os.environ.get("TAKELSHIP_GID",
                                   args.gid)
        self._logger.debug('command line arguments: {args}'.format(args=args))

    def make_rshare(self):
        self._logger.debug(
            f"share root mount")
        command = [
            'mount',
            '/',
            '--make-rshare']
        self._run_(command)

    def configure_gid(self):
        self._logger.debug(
            f"configure {self._username} gid")

        if self._gid == default_gid:
            self._logger.debug(
                f"{self._username} gid is already {self._gid}")
            return

        if not self._group_exists_(self._gid) == 0:
            self._logger.debug(
                f"no group exists with gid {self._gid}")
            self._create_group_(self._newgroup, self._gid)
            self._logger.debug(
                f"created group {self._newgroup} with gid {self._gid}")
            self._groupname = self._newgroup

        if self._change_gid_(self._username, self._gid) == 0:
            self._logger.debug(
                f"{self._username} gid changed to {self._gid}")
            return True
        else:
            self._logger.error(
                f"unable to change gid of user "
                f"{self._username} to {self._gid}")
            return False

    def configure_uid(self):
        self._logger.debug(
            f"configure {self._username} uid")

        if self._uid == default_uid:
            self._logger.debug(
                f"{self._username} uid is already {self._uid}")
            return

        if self._change_uid_(self._username, self._uid) == 0:
            self._logger.debug(
                f"{self._username} uid changed to {self._uid}")
            return True
        else:
            self._logger.error(
                f"unable to change uid of user "
                f"{self._username} to {self._uid}")
            return False

    def chown_datadir(self):
        self._logger.debug(
                'changing ownership of data dir '
                '{{ takel_ship_compose_home_dir }}/'
                '{{ takel_ship_compose_data_dir }}')

        command = [
            '/bin/chown',
            '--recursive',
            '{user}:{group}'.format(
                user=self._username,
                group=self._groupname),
            '{{ takel_ship_compose_home_dir }}/'
            '{{ takel_ship_compose_data_dir }}']
        result = self._run_(command)
        if result.returncode:
            return False

        self._logger.info(
            'changed ownership of data directory')
        return True

    def _change_gid_(self, name, gid):
        self._logger.debug(
            f"changing gid of user {name} to {gid}")
        command = [
            'usermod',
            '--gid', gid,
            name]
        return self._run_(command).returncode

    def _change_uid_(self, name, uid):
        self._logger.debug(
            f"changing uid of user {name} to {uid}")
        command = [
            'usermod',
            '--uid', uid,
            name]
        return self._run_(command).returncode

    def _create_group_(self, name, gid):
        group = {
            'name': name,
            'gid': gid}
        self._logger.debug(
            'creating group: {group}'.format(
                group=group))
        command = ['groupadd',
                   '--gid',
                   str(gid),
                   '--non-unique',
                   name]
        return self._run_(command)

    def _group_exists_(self, group):
        self._logger.debug(
            'checking group: {group}'.format(group=group))
        command = ['getent', 'group', group]
        return self._run_(command).returncode

    def _logger_init_(self, debug):
        logger = logging.getLogger(__file__)
        logger.setLevel(logging.DEBUG)
        if debug:
            logger.setLevel(logging.DEBUG)
        Path('/debug').mkdir(exist_ok=True)
        ch = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            "%Y-%m-%d %H:%M:%S")
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        return logger

    def _parse_args_(self):
        parser = argparse.ArgumentParser()
        parser.add_argument(
            "--debug",
            dest="debug",
            action="store_true",
            default=False,
            help="Set debug flag")
        parser.add_argument(
            "--gid",
            type=str,
            default=default_gid,
            help=f"Group ID of the {{ takel_ship_compose_user.owner }} user")
        parser.add_argument(
            "--uid",
            type=str,
            default=default_uid,
            help=f"User ID of the {{ takel_ship_compose_user.owner }} user")

        return parser.parse_args()

    def _run_(self, command):
        self._logger.debug(
            'running command: {command}'.format(
                command=' '.join(command)))
        result = subprocess.run(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
        if result.returncode:
            'command failed: {command}'.format(
                command=' '.join(command))
            self._logger.debug(
                '  returncode: {returncode}'.format(
                    returncode=result.returncode))
            self._logger.debug(
                '  stdout: {stdout}'.format(

                    stdout=result.stdout))
            self._logger.debug(
                '  stderr: {stderr}'.format(
                    stderr=result.stderr))
        return result

    def _run_and_fork_(self, command):
        self._logger.debug(
            'running command in background: {command}'.format(
                command=' '.join(command)))
        subprocess.Popen(
            command,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)


def main():
    change_id = ChangeID()
    change_id.configure_gid()
    change_id.configure_uid()
    change_id.chown_datadir()

if __name__ == "__main__":
    main()
