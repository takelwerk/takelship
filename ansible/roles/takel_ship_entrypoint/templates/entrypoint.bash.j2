{{ takel_ship_scripts_shebang }}

# Read more about bash string interpolation here:
# https://docs.docker.com/compose/how-tos/environment-variables/variable-interpolation/
DEBUG="${TAKELSHIP_DEBUG:-'false'}"
DEBUG="${DEBUG,,}"
debug() {
  # if the debug environment variable is set
  # then output all command line arguments
  [[ "$DEBUG" == "true" ]] && echo "$@"
}

POD={{ takel_ship_scripts_script_pod['name'] }}
LOG="{{ takel_ship_entrypoint_log_prefix }}"
COMPOSE_DIR={{ takel_ship_compose_home_dir }}/{{ takel_ship_compose_data_dir }}/{{ takel_ship_compose_compose_dir }}
PROJECTS_DIR={{ takel_ship_compose_home_dir }}/{{ takel_ship_compose_data_dir }}/{{ takel_ship_compose_compose_dir }}/{{ takel_ship_compose_projects_dir }}

echo $LOG This is a takelwerk takelship container
echo $LOG Image: {{ project['images']['project']['target_user'] }}/{{ project['images']['project']['target_repo'] }}:{{ project['version'] }}
echo $LOG More info: https://github.com/takelwerk/takelship

if [ -z "$1" ] || [[ "$1" == "/bin/bash" ]]; then
  echo $LOG No project selected. Available projects:
  {{ takel_ship_scripts_script_first_aid['name'] }}
  exit
fi

PROJECT="$1"
debug project is set to "$PROJECT"

if [[ "$PROJECT" != "update" ]] &&
{% for project in takel_ship_compose_projects %}
  [[ "$PROJECT" != {{ project['name'] }} ]] &&
{% endfor %}
  true; then
  echo $LOG There is no project: "$PROJECT"
  {{ takel_ship_scripts_script_first_aid['name'] }}
  exit
fi

echo $LOG Preparing podman container environment

UPDATE="false"

debug check if we have to prepopulate the data dir
[ ! -e "$PROJECTS_DIR" ] && UPDATE="true"

UPDATE="${TAKELSHIP_UPDATE:-$UPDATE}"
UPDATE="${UPDATE,,}"

debug make sure that the data dir exists
mkdir --parents {{ takel_ship_compose_home_dir }}/{{ takel_ship_compose_data_dir }}

if [[ "$UPDATE" == "true" ]] || [[ "$PROJECT" == "update" ]]; then
  echo $LOG Updating data directory
  cp --recursive /home/podman/dist/* /home/podman/data
fi

debug change podman uid and git and chown data dir
{{ takel_ship_entrypoint_script_change_ids['name'] }}

[[ "$PROJECT" == "update" ]] &&
  exit

# From here on non-privileged containers will fail

debug suppress warning message about shared mount
mount / --make-rshare

debug create podman socket
$POD podman system service --time=0 {{ takel_ship_podman_socket['socket'] }} &

debug export takelship environment variables
{{ takel_ship_entrypoint_script_export_envvars['name'] }} "$(env)"

# start takelship registry
echo $LOG Starting registry on localhost:{{ takel_ship_registry_takelship_registry_port['port'] }}
$POD mkdir --parents {{ takel_ship_compose_data_dir }}/{{ takel_ship_registry_cache_dir }}
$POD --workdir $COMPOSE_DIR/{{ takel_ship_registry_takelship_service['name'] }} ./{{ takel_ship_compose_run_podman }}

# copy images
echo $LOG Copying images for project: $PROJECT
$POD $PROJECTS_DIR/{{ takel_ship_compose_copy_images }}.$PROJECT

# start project
$POD --workdir $PROJECTS_DIR ./{{ takel_ship_compose_run_podman }}.$PROJECT

# show logs
echo $LOG Boarding podman compose logs
while true; do
  $POD --workdir $PROJECTS_DIR podman-compose --file {{ takel_ship_compose_service_filename}}.$PROJECT.yml logs --follow 2>/dev/null;
done
